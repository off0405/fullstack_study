함수Function
여러 실행 코드들의 묶음(그룹화)
자주 사용하는 코드들(기능)을 저장해뒀다가, 필요할 때 호출해서 사용
function 키워드를 사용하여 정의 => ES6차: 화살표 함수 사용

1. 함수 선언문 : 기명 함수로 정의
function 함수명() {
  실행코드;
}

2. 함수 표현식 : 익명 함수를 변수에 할당하여 
변수 = function () {
  실행코드;
};

위와 같이 정의된 함수는 즉시 실행되지 않음
메모리에 할당되어 있다가, 함수가 호출 되면 실행됨
함수 호출:
1. 함수명();
2. 변수명();

"예제 9"

참고) (고급) 함수 선언문과 함수 표현식의 차이점
함수 선언문은 호이스팅(끌어 올리기)이 일어난다.
해당 스코프(유효범위)의 최상단으로 "끌어올려진것"과 같은 현상.
변수나 함수 선언이 코드 실행보다 먼저 메모리에 할당(저장)되는 과정

"예제 15"


연습) 버튼 클릭할때마다 배경색이 바뀌도록 함수 만들기

"예제 39"


-----------------------------------------

매개변수가 있는 함수

funcion 함수명(매개변수1, 매개변수2, ...) {
  실행코드
}
함수명(인자값1, 인자값2, ...);

"예제 53"

로그인 함수 만들기 실습
"예제 62"

-----------------------------------------

함수에서 return 문의 역할
데이터(결과값)를 반환
함수를 강제 종료.

function 함수명 () {
  실행코드;
  return 값;
  
  실행코드2;
}

"예제 99"


-----------------------------------------

전역 변수와 지역 변수
"예제 137"

Q.전역과 지역을 나누는 이유?
= 변수명 충돌을 피하기 위해
해당 데이터가 전체에서 쓰인다면 전역변수로, 함수 내 또는 제어문 내에서만 쓰이면
지역 변수로 선언

지역변수의ㅏ 예: for 문의 초기화식
for ( let i = 0; i < 1; i++ ){
  
}


-------------------------------------
내장함수
자바스크립트 엔진에 내장되어 바로 호출 가능한 함수 
// 문자열 데이터를 정수형 데이터로 반환
console.log(parseInt('10.33')); // 10
console.log(parseInt('15.5px')); // 15
console.log(parseInt('a40')); // NaN
console.log(parseInt(true)); // NaN

// 문자열 데이터를 실수형 데이터로 반환
console.log(parseFloat('10.33')); // 10.33
console.log(parseFloat('15.5px')); // 15.5
console.log(parseFloat('a40')); // NaN
console.log(parseFloat(true)); // NaN

// 문자형 데이터로 반환
console.log(String(5)); // '5'
console.log(String([1, 2, 3, 4])); // '1,2,3,4'
console.log(String(new Date())); // Sat Jan 07 2023 19:12:03 GMT+0900 (한국 표준시)

// 숫자형 데이터로 반환(숫자형으로 바꿀수 없으면 NaN을 반환)
console.log(Number('5')); // 5
console.log(Number(true)); // 1
console.log(Number(false)); // 0
console.log(Number('abc')); // NaN

// 논리형 데이터로 반환
// false 값들: false, 0(-0), ''(""), undefined, null, NaN
console.log(Boolean(5)); // true
console.log(Boolean(null)); // false
console.log(Boolean(10 > 9)); // true

// NaN(Not-a-Number) 값이면 true를 반환
console.log(isNaN(5)); // false
console.log(isNaN(5 - 2)); //false
console.log(isNaN('123')); // false, 테스트하기 전에 값을 숫자로 변환
console.log(isNaN('Hello')); // true
